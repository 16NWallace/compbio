#!/usr/bin/env python



# python libs
import copy
import os
import sys
import StringIO
import shutil


# rasmus libs
from rasmus import stats
from rasmus import tablelib
from rasmus import treelib
from rasmus import util

# rasmus.bio libs
from rasmus.bio import genomeutil
from rasmus.bio import phylo


options = [
    ["s:", "stree=", "stree", "<species tree>",
        {"single": True}],
    ["S:", "smap=", "smap", "<gene2species map file>",
        {"single": True}],
    ["o:", "outfile=", "outfile", "<output table>",
        {"single": True}],
    ["T:", "treeext=", "treeext", "<tree file extension>",
        {"single": True}],
]

conf = util.parseOptions(sys.argv, options)


stree = treelib.read_tree(conf["stree"])
gene2species = phylo.read_gene2species(conf["smap"])

tab = tablelib.Table(headers=["famid", "node", "dist", "boot",
                              "species", "event", "parent"],
                     types={"famid": str,
                            "node": str,
                            "dist": float,
                            "boot": float,
                            "species": str,
                            "event": str,
                            "parent": str})

out = open(conf["outfile"], "w")
tab.write_header(out)

for treefile in sys.stdin:
    treefile = treefile.rstrip("\n")
    print treefile
    
    tree = treelib.read_tree(treefile)
    recon = phylo.reconcile(tree, stree, gene2species)
    events = phylo.label_events(tree, recon)
    
    famid = os.path.basename(treefile).replace(conf["treeext"], "")
    
    for node in tree:
        if node.parent:
            parent = str(node.parent.name)
        else:
            parent = "-1"
            
        if node.isLeaf():
            boot = -1.0
        else:
            boot = node.data.get("boot", -1.0)
        
        tab.write_row(out, {"famid": famid,
                            "node": str(node.name),
                            "dist": float(node.dist),
                            "boot": float(boot),
                            "species": str(recon[node].name),
                            "event": events[node],
                            "parent": parent})

out.close()
                           
                           
    
