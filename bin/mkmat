#!/usr/bin/perl
use strict;

my $USAGE = <<EOF;
usage: mkmat <options> <file>

file     input file (default: stdin)

options
   -smat          output smat format (default)
   -clutodense    output CLUTO dense mat format
   -clutosparse   output CLUTO sparse mat format
   -d <char>      specify delimiter 'char' (default: tab)         
   -r             output first column to row label file
   -c             output first row to column label file
   -rfile <file>  specify row label file (default: *.rlabel)
   -cfile <fiel>  specify col label file (default: *.clabel)
   -o <file>      output matrix to a file (default: stdout)
   -oext <ext>    output to file with input filename plus a new extension
EOF

# constants
my $REXT = ".rlabel";
my $CEXT = ".clabel";

main();

sub main() {
   # parameters
   my $infile  = "";
   my $outfile = "";
   my $oext    = "";
   my $oformat = "-smat";
   my $delim   = "\t";
   my $rlabel  = 0;
   my $clabel  = 0;
   my $rfile   = "";
   my $cfile   = "";


   # check args
   if (scalar(@ARGV) < 1) {
      print $USAGE;
      exit(1);
   }

   #parse args
   while(@ARGV) {
      my $arg = shift @ARGV;

      # output formats
      if ($arg eq "-smat" || 
          $arg eq "-clutodense" || 
          $arg eq "-clutosparse")
      {
         $oformat = $arg;
      }

      # delim
      elsif ($arg eq "-d") {
         $delim = shift @ARGV;
      }

      # labels
      elsif ($arg eq "-r") { $rlabel = 1; }
      elsif ($arg eq "-c") { $clabel = 1; }
      elsif ($arg eq "-rfile") {
         $rlabel = 1;
         $rfile = shift @ARGV;
      }
      elsif ($arg eq "-cfile") {
         $clabel = 1;
         $cfile = shift @ARGV;
      }

      # output file
      elsif ($arg eq "-o") {
         $outfile = shift @ARGV;
      }
      elsif ($arg eq "-oext") {
         $oext = shift @ARGV;
      }

      # input file
      else {
         if ($arg =~ m/^-/) {
            die "unknown option '$arg'";
         }
         $infile = $arg;
      }
   }

   # require input file
   $infile or die "must specify input file $infile";


   # setup outfile
   if (!$outfile && $infile && $oext) {
      $outfile = $infile . $oext;
   }

   # setup label files
   if ($rlabel && $rfile eq "") {
      $outfile or die "can't infer row label file without output file '-o'";
      $rfile = $outfile . $REXT;
   }
   if ($clabel && $cfile eq "") {
      $outfile or die "can't infer col label file without output file '-o'";
      $cfile = $outfile . $CEXT;
   }


   # setup input output streams
   my $in   = OpenInFile($infile);
   my $out  = OpenOutFile($outfile);
   my $rout = OpenLabelFile($rfile);
   my $cout = OpenLabelFile($cfile);

   
   # count rows, columns, and non-zeros
   my ($nrows, $ncols, $nnz) = GetMatrixSize($in, $rlabel, $clabel, $delim),
   
   # re-open input file
   close($in);
   $in = OpenInFile($infile);

   
   # output stats if there is output file
   if ($outfile || $oext) {
      print "format: $oformat\n";
      print "output: '$outfile', '$rfile', '$cfile'\n";
      print "nrows = $nrows, ncols = $ncols, nnz = $nnz\n";
   }
   
   # convert file
   if ($oformat eq "-smat") {
      ConvertToSmat($in, $out, $rout, $cout, $nrows, $ncols, $nnz, $delim);
   } elsif ($oformat eq "-clutodense") {
      ConvertToClutoDense($in, $out, $rout, $cout, $nrows, $ncols, $nnz, $delim);
   } elsif ($oformat eq "-clutosparse") {
      ConvertToClutoSparse($in, $out, $rout, $cout, $nrows, $ncols, $nnz, $delim);
   } else {
      die "unknown output format '$oformat'";
   }

   
   # close all streams
   close($out);
   close($in);
   if (defined($rout)) { close($rout); }
   if (defined($cout)) { close($cout); }
}



sub ConvertToSmat()
{
   my ($in, $out, $rout, $cout, $nrows, $ncols, $nnz, $delim) = @_;
   
   # print header
   print $out "$nrows $ncols $nnz\n";
   
   # print col labels
   if (defined($cout)) {
      my $line = <$in>;
      chomp $line;
      my @labels = split(/$delim/, $line);
      shift @labels; # empty skip corner
      print $cout join("\n", @labels) . "\n";
   }
   
   # read and print   
   for (my $row = 0; my $line = <$in>; $row++) {
      chomp $line;
      my @vals = split(/$delim/, $line);
      
      # print row labels
      if (defined($rout)) {
         print $rout "$vals[0]\n";
         shift @vals;
      }
      
      my $col = 0;
      foreach my $val (@vals) {
         if ($val) {
            print $out "$row $col $val\n";
         }
         $col++;
      }
   }
}

sub ConvertToClutoDense()
{
   my ($in, $out, $rout, $cout, $nrows, $ncols, $nnz, $delim) = @_;
   
   # print header
   print $out "$nrows $ncols\n";
   
   # print col labels
   if (defined($cout)) {
      my $line = <$in>;
      chomp $line;
      my @labels = split(/$delim/, $line);
      shift @labels; # empty skip corner
      print $cout join("\n", @labels) . "\n";
   }
   
   # read and print
   while (my $line = <$in>) {
      chomp $line;
      my @vals = split(/$delim/, $line);
      
      # print row labels
      if (defined($rout)) {
         print $rout "$vals[0]\n";
         shift @vals;
      }
      
      # print values
      foreach my $val (@vals) {
         if ($val eq "") { $val = 0; }
         print $out "$val ";
      }
      
      # print extra zeros
      for (my $i=scalar(@vals); $i<$ncols; $i++) {
         print $out "0 ";
      }
      
      print $out "\n";
   }
}


sub ConvertToClutoSparse()
{
   my ($in, $out, $rout, $cout, $nrows, $ncols, $nnz, $delim) = @_;
   
   # print header
   print $out "$nrows $ncols $nnz\n";
   
   # print col labels
   if (defined($cout)) {
      my $line = <$in>;
      chomp $line;
      my @labels = split(/$delim/, $line);
      shift @labels; # empty skip corner
      print $cout join("\n", @labels) . "\n";
   }
   
   # read and print
   for (my $row = 0; my $line = <$in>; $row++) {
      chomp $line;
      my @vals = split(/$delim/, $line);

      # print row labels
      if (defined($rout)) {
         print $rout "$vals[0]\n";
         shift @vals;
      }

      my $col = 1;      
      foreach my $val (@vals) {
         if ($val) {
            print $out "$col $val ";
         }
         $col++;
      }
      print $out "\n";
   }
}


sub GetMatrixSize()
{
   my ($in, $rlabel, $clabel, $delim) = @_;
   my $nrows = 0;
   my $ncols = 0;
   my $nnz   = 0;
   
   # process input
   while (my $line = <$in>) {
      # skip if column labels
      $nrows++;      
      if ($nrows == 1 && $clabel) { next; }
   
      # process line
      chomp $line;
      my $n = 0;
      foreach my $val (split(/$delim/, $line)) {
         if ($val) { $n++; }
      }
      
      # decrement column count if row labels present
      if ($rlabel) { $n--;}
      
      # tally up
      if ($ncols < $n) { $ncols = $n; }
      $nnz += $n;
      
   }
   
   # decrement row count if column labels are present
   if ($clabel) { $nrows--; }
   
   return ($nrows, $ncols, $nnz);
}

sub OpenInFile()
{
   my ($infile) = @_;
   my $in;
   
   if ($infile) {
      open($in, "< $infile") or die "can't open file '$infile' for reading";
   } else {
      open($in, "<&STDIN");
   }
   return $in;
}

sub OpenOutFile()
{
   my ($outfile) = @_;
   my $out;
   
   if ($outfile) {
      open($out, "> $outfile") or die "can't open file '$outfile' for writing";
   } else {
      open($out, ">&STDOUT");
   }
   return $out;
}

sub OpenLabelFile()
{
   my ($file) = @_;
   my $out;
   
   if ($file) {
      open ($out, "> $file");
   }
   return $out;
}


