#!/usr/bin/env python
# run tt with standard command-line interface

import sys, os, shutil, time
import optparse
import subprocess

from rasmus import util, treelib
from rasmus.bio import phylo, fasta
from rasmus.bio import phylorun as phy

from rasmus.common import *

path = os.path.dirname(__file__)

o = optparse.OptionParser()
o.add_option("--depth", metavar="<depth>", type="int", default=1)
o.add_option("-S", "--smap", metavar="<gene2species map>")
o.add_option("-s", "--stree", metavar="<species tree>")
phy.add_common_options(o, align=False)
o.set_default("extra", "-D 1 -L 1 -b")
o.remove_option("--seqtype")
o.remove_option("--boot")
o.remove_option("--no-opttree")
conf, files = phy.parse_common_options(o)

#=============================================================================
# parsing output fileformat

def read_output(filename):
    # col 0: mutation cost
    # col 1: duplications
    # col 2: losses
    # col 3: NNI-distance (errors)
    # col 4: Rooted-opt-gene-tree
    
    lst = []
    for n,toks in enumerate(DelimReader(filename, delim=' ')):
	lst.append(map(float, toks[:4]) + [toks[4], n])
    lst.sort(key=lambda x: (x[0],x[3],x[-1]))
    return treelib.parse_newick(lst[0][4])


#=============================================================================

def run(args, outdir, outfile):
    """Run a program in a subprocess within a new directory"""
    curdir = os.getcwd()
    os.chdir(outdir)
    out = file(outfile, 'w')
    ret = subprocess.call(args, stdout=out)
    out.close()
    os.chdir(curdir)
    return ret 

#=============================================================================

gene2species = phylo.read_gene2species(conf.smap)
stree = treelib.read_tree(conf.stree)

result = 0
for fn in files:
    basename = phy.get_basename(fn, conf)

    outdir = basename + conf.outputext
    phy.make_output_dir(outdir)

    # make tt-compatible gene tree
    oldnames = {}
    tree = treelib.read_tree(basename + conf.usertreeext)
    for node in list(tree):
        # rename genes with species prefix
	if node.is_leaf():
            sp = gene2species(node.name)
            assert "_" not in sp
            tree.rename(node.name, sp + "_" + node.name)

	# remove internal node names and bootstraps
	else:
            if (type(node.name) is str) and (not node.name.isdigit()):
	        newname = tree.new_name()
	        oldnames[newname] = node.name
		tree.rename(node.name, newname)
            if 'boot' in node.data:
                del node.data['boot']
    tree.write(outdir + "/intree", oneline=True)

    # make tt-compatible species tree
    for node in stree:
       node.dist = 0
    stree.write(outdir + "/stree", rootData=True, oneline=True)
    
    # require minimium size of tree
    if len(tree.leaves()) <= 2:
        continue
    
    # basic arguments
    args = ["tt", "-Rf", "-la_",
	    "-G", "intree",
	    "-S", "stree",
	    "-k", str(conf.depth)]

    if conf.extra:
        args.extend(conf.extra)

    # record command
    cmd = " ".join(args)
    print cmd
    out = open(outdir + "/cmd", "w")
    out.write(cmd)
    out.close()

    # run program
    if run(args, outdir, "out") != 0:
        open(outdir + "/error", "w").close()
        result = 1
    else:
        tree = read_output(outdir + "/out")
        
	# restore original gene names
	for node in list(tree):
	    if node.is_leaf():
	        newname = node.name[node.name.find("_")+1:]
	        tree.rename(node.name, newname)
	    else:
	        if node.name in oldnames:
		    tree.rename(node.name, oldnames[node.name]) 
	tree.write(basename + conf.treeext, rootData=True)
				        
sys.exit(result)
