#!/usr/bin/env python

import os, sys

from rasmus import treelib, tablelib, util
from rasmus.bio import genomeutil, phylo

import Spidir
import Spidir.Likelihood



options = [
    ["s:", "stree=", "stree", "<species tree>",
     {"single": True}],
    ["S:", "smap=", "smap", "<gene to species map>",
     {"single": True}],
    ["T:", "treeext=", "treeext", "<Tree extension>",
     {"single": True}],
    ["i", "stdin", "stdin", "",
     {"single": True}],
    ["p:", "params=", "params", "<spidir parameters file>",
     {"single": True}],
    ["P:", "parts=", "parts", "<partition file>",
     {"single": True}],
    ["o:", "output=", "output", "<output prefix>",
     {"single": True}],
    ]


conf = util.parseOptions(sys.argv, options, quit=True)




def countDupLoss(famids, treefiles, stree, gene2species, params):
    totalTree = stree.copy()
    singleTree = stree.copy()
    
    # setup table and headers
    headers = ["partid", "genes", "treelen"]
    if params:
        headers.append("famrate")
    headers += ["appear", "dup", "loss"]
    
    for name in stree.nodes:
        headers.extend(["%s-appear" % str(name),
                        "%s-dup" % str(name),
                        "%s-loss" % str(name),
                        "%s-genes" % str(name)])
    
    tab = tablelib.Table(headers=headers)
    
    
    
    # initalize counts to zero
    phylo.initDupLossTree(totalTree)
    
    
    util.tic("read trees")
    # count dup loss
    for famid, f in zip(famids, treefiles):
        if not os.path.exists(f):
            print "skipping", f
            continue
        print f
        
        tree = treelib.readTree(f)
        
        phylo.initDupLossTree(singleTree)
        dup, loss, appear = phylo.countDupLossTree(tree, singleTree, gene2species)
        dup, loss, appear = phylo.countDupLossTree(tree, totalTree, gene2species)

        phylo.countAncestralGenes(singleTree)
        
        row, junk = tree2row(singleTree)
        row["partid"] = name
        
        
        # add treelen
        row['treelen'] = sum(x.dist for x in tree.nodes.values())        
        
        # add family rate
        if params:
            row['famrate'] = Spidir.Likelihood.getBaserate(
                                    tree, stree, params, \
                                    gene2species=gene2species)
        
        tab.append(row)
    util.toc()

    # count ancestral genes
    phylo.countAncestralGenes(totalTree)
    
        
    return tab, totalTree




def readDupLossTree(stree, row):
    stree2 = stree.copy()

    for name, node in stree2.nodes.items():
        node.data['dup'] = row["%s-dup" % str(name)]
        node.data['loss'] = row["%s-loss" % str(name)]
        node.data['genes'] = row["%s-genes" % str(name)]
    return stree2


def tree2row(stree):
    row = {"genes": 0,
           "appear": 0,               
           "dup": 0,
           "loss": 0
           }
    
    headers = ["genes", "appear", "dup", "loss"]

    for name, node in stree.nodes.iteritems():
        row["%s-appear" % str(name)] = node.data['appear']
        row["%s-dup" % str(name)] = node.data['dup']
        row["%s-loss" % str(name)] = node.data['loss']
        row["%s-genes" % str(name)] = node.data['genes']
        
        headers.extend(["%s-appear" % str(name),
                        "%s-dup" % str(name),
                        "%s-loss" % str(name),
                        "%s-genes" % str(name)])
        
        row['appear'] += node.data['appear']
        row['dup'] += node.data['dup']
        row['loss'] += node.data['loss']
    
    for leaf in stree.leaves():
        row['genes'] += leaf.data['genes']
    
    return row, headers
    

def addDupLossTree(stree, row):
    for name, node in stree.nodes.items():
        if 'dup' not in node.data:
            node.data['dup'] = 0
            node.data['loss'] = 0
            node.data['genes'] = 0
            
        node.data['dup'] += row["%s-dup" % str(name)]
        node.data['loss'] += row["%s-loss" % str(name)]
        node.data['genes'] += row["%s-genes" % str(name)]
    





def main(conf):
    # read data
    gene2species = genomeutil.readGene2species(conf["smap"])
    stree = treelib.readTree(conf["stree"])

    if "params" in conf:
        params = Spidir.readParams(conf["params"])
        
    else:
        params = None
    
    # determine treefiles
    treefiles = conf["REST"]
    
    if conf["stdin"]:  
        for line in sys.stdin:
            treefiles.append(line.rstrip())


    famids = [util.replaceExt(os.path.basename(x), conf["treeext"], "")
              for x in treefiles]
    
    tab, totalTree = countDupLoss(conf, treefiles, stree, gene2species, params)
    
    # total table
    row, headers = tree2row(totalTree)
    tab2 = tablelib.Table([row], headers=headers)
    
    # output
    tab.write(conf["output"] + ".tab")    
    tab2.write(conf["output"] + "-total.tab")
    

main(conf)
