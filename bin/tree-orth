#!/usr/bin/env python


import os, sys, optparse
from itertools import chain
from rasmus import treelib, util, tablelib
from compbio import phylo


o = optparse.OptionParser()
o.add_option("-d", "--dir", dest="dir", action="store_true",
             help="identify trees by their directory")
o.add_option("-s", "--stree", dest="stree", metavar="SPECIES_TREE")
o.add_option("-S", "--smap", dest="smap", metavar="GENE_TO_SPECIES_MAP")
o.add_option("-T", "--treeext", dest="treeext", metavar="TREE_EXT")
o.add_option("-R", "--reconext", dest="reconext", metavar="RECON_EXT")
o.add_option("--fix-ils", dest="fix_ils",
             default=False, action="store_true")

conf, args = o.parse_args()

#=============================================================================

# read args
stree = treelib.read_tree(conf.stree)
gene2species = phylo.read_gene2species(conf.smap)


def read_filenames(stream):
    for line in stream:
        yield line.rstrip()

if len(args) == 0:
    filenames = read_filenames(sys.stdin)
else:
    filenames = args


for filename in filenames:
    tree = treelib.read_tree(filename)
    if conf.dir:
        treename = os.path.basename(os.path.dirname(filename))
    else:
        treename = filename

    # check tree
    assert(treelib.is_rooted(tree))

    # get recon and events
    if conf.treeext and conf.reconext:
        if conf.fix_ils:
            raise Exception("Cannot use --fix-ils if --reconext is specified")
        
        try:
            recon, events = phylo.read_recon_events(util.replace_ext(
                filename, conf.treeext, conf.reconext), tree, stree)
        except:
            print >>sys.stderr, filename
            raise
    else:
        # use MPR to build reconciliation and events
        recon = phylo.reconcile(tree, stree, gene2species)
        events = phylo.label_events(tree, recon)
        if conf.fix_ils:
            dupcons = phylo.dup_consistency(tree, recon, events)
            events = phylo.fix_ils_errors(events, dupcons, newCopy=False)
    
    orths = phylo.find_orthologs(tree, stree, recon, events)

    for gene1, gene2, spcnt1, spcnt2 in orths:
        sp1 = gene2species(gene1)
        sp2 = gene2species(gene2)

        if sp1 > sp2:
            sp1, sp2 = sp2, sp1
            gene1, gene2 = gene2, gene1
            spcnt1, spcnt2 = spcnt2, spcnt1
        
        print "%s\t%s\t%s\t%s\t%s\t%d\t%d" % (treename, sp1, sp2, gene1, gene2,
                                              spcnt1, spcnt2)




        
    
