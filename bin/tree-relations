#!/usr/bin/env python
# Tue May 12 15:54:18 EDT 2009
# output all relations represented in a tree

import os, sys, optparse
from itertools import chain
from rasmus import treelib, util, tablelib
from rasmus.bio import phylo

o = optparse.OptionParser()
o.add_option("-d", "--dir", dest="dir", action="store_true")
o.add_option("-s", "--stree", dest="stree", metavar="SPECIES_TREE")
o.add_option("-S", "--smap", dest="smap", metavar="GENE_TO_SPECIES_MAP")
o.add_option("-T", "--treeext", dest="treeext", metavar="TREE_EXT")
o.add_option("-R", "--reconext", dest="reconext", metavar="RECON_EXT")
conf, args = o.parse_args()

# read args
stree = treelib.read_tree(conf.stree)
gene2species = phylo.read_gene2species(conf.smap)


def read_filenames(stream):
    for line in stream:
        yield line.rstrip()

if len(args) == 0:
    filenames = read_filenames(sys.stdin)
else:
    filenames = args



# process tree files
for filename in filenames:
    tree = treelib.read_tree(filename)

    if conf.dir:
        treename = os.path.basename(os.path.dirname(filename))
    else:
        treename = filename

    assert(treelib.is_rooted(tree))

    # get recon and events
    if conf.treeext and conf.reconext:
        try:
            recon, events = phylo.read_recon_events(util.replace_ext(
                filename, conf.treeext, conf.reconext), tree, stree)
        except:
            print >>sys.stderr, filename
            raise
    else:
        # use MPR to build reconciliation and events
        recon = phylo.reconcile(tree, stree, gene2species)
        events = phylo.label_events(tree, recon)
        

    for leaf in tree.leaves():
        print "\t".join([treename, "gene", leaf.name])

    for node in tree:

        if events[node] == "gene":
            continue

        rel = util.sort([",".join(sorted(child.leaf_names()))
                                       for child in
                         util.sort(node.children,
                                   key=lambda x: len(x.leaves()))])
        
        if events[node] == "dup":
            row = [treename, "dup"] + rel
        elif events[node] == "spec":
            row = [treename, "spec"] + rel
            
        print "\t".join(row)


    for loss in phylo.find_loss(tree, stree, recon):

        print "\t".join([treename, "loss",
                         ",".join(sorted(loss[0].leaf_names())),
                         str(loss[1].name)])
                            
            

