#!/usr/bin/env python
# partitions Fasta files into several gene-family Fasta files

# python imports
import optparse
import os
import sys
import shutil
from itertools import izip

# rasmus imports
from rasmus.bio import fasta
from rasmus import util

#=============================================================================
# options
o = optparse.OptionParser()
o.add_option("-p", "--part", dest="part", metavar="<part file>")
o.add_option("", "--famid", dest="famid", action="store_true", default=False,
             help="first entry in line is family name")
    
o.add_option("-o", "--outdir", dest="outdir", metavar="<output directory>")
o.add_option("-F", "--outext=", dest="fastaext",
             metavar="<output fasta extension>",
             default= ".fasta")


# parse options
conf, fa_files = o.parse_args()


#=============================================================================
# create a fasta for each family
if not os.path.join(conf.outdir):
    shutil.makedirs(conf.outdir)


# read partition
assert conf.part
parts = util.read_delim(conf.part)

# get famids
if conf.famid:
    famids = util.cget(parts, 0)
    parts = [row[1:] for row in parts]
else:
    famids = map(str, range(len(parts)))
    

# clear fasta files
util.tic("clearing old sequence files")
for famid in famids:

    # make family directory
    famdir = os.path.join(conf.outdir, famid)
    if not os.path.exists(famdir):
        os.mkdir(famdir)

    seqfile = os.path.join(famdir, famid + conf.fastaext)
    if os.path.exists(seqfile):
        os.remove(seqfile)
util.toc()

#=============================================================================
# read sequences
util.tic("read sequences")
for f in fa_files:
    util.tic("reading '%s'" % f)

    if f.endswith(".gz"):
        f = os.popen("zcat '%s'" % f)
    
    seqs = fasta.read_fasta(f, useIndex=False)
   
    for famid, part in izip(famids, parts):    

        seqfile = os.path.join(conf.outdir, famid, famid + conf.fastaext)
        util.logger(seqfile)
        seqs2 = seqs.get(part)

        if len(seqs2) > 0:
            out = open(seqfile, "a")
            seqs2.write(out)
            out.close()
    
    util.toc()
util.toc()



