#!/usr/bin/env python
# run RAxML with standard command-line interface


import sys, os, shutil, time
import optparse
import subprocess

from rasmus import util, treelib
from rasmus.bio import phylo, fasta
from rasmus.bio import phylorun as phy


o = optparse.OptionParser()
o.add_option("-S", "--smap", metavar="<gene2species map>")
o.add_option("-s", "--stree", metavar="<species tree>")
phy.add_common_options(o)

conf, files = phy.parse_common_options(o)

# raxml program name
PROG = "treebest"


#=============================================================================

def run(args, outdir):
    """Run a program in a subprocess within a new directory"""
    curdir = os.getcwd()
    os.chdir(outdir)
    ret = subprocess.call(args)
    os.chdir(curdir)
    return ret

def setup_usertree(treefile, treefile2):
    usertree = treelib.read_tree(treefile)

    # save data
    data = dict((n.name, n.data) for n in usertree)

    # prepare usertree
    usertree2 = treelib.unroot(usertree, newCopy=True)
    for n in usertree2:
        n.data = {}
        
    usertree2.write(outdir +"/" + treefile2)

    return usertree, data
    

#=============================================================================

gene2species = phylo.read_gene2species(conf.smap)
stree = treelib.read_tree(conf.stree)

result = 0
for fn in files:
    basename = phy.get_basename(fn, conf)

    outdir = basename + conf.outputext
    phy.make_output_dir(outdir)
    align = fasta.read_fasta(basename + conf.alignext)


    # rename genes with species suffix
    for name, seq in align.items():
        del align[name]
        sp = gene2species(name)
        assert "_" not in sp
        align[name + "_" + sp] = seq
    align.write(outdir + "/align")


    # make treebest-compatiable species tree
    for node in list(stree):
        if not node.is_leaf():
            stree.rename(node.name, "n" + str(node.name))

    stree.write(outdir + "/stree", rootData=True)
    
    # require minimium size of alignment
    if len(align) <= 2:
        continue
    
    # basic arguments
    args = [PROG, "best", "-f", "stree", "-o", "tree", "align"]
    
    if conf.extra:
        args.extend(conf.extra)

    # record command
    cmd = " ".join(args)
    print cmd
    out = open(outdir + "/cmd", "w")
    out.write(cmd)
    out.close()

    # run program
    if run(args, outdir) != 0:
        open(outdir + "/error", "w").close()
        result = 1
    else:
        tree = treelib.read_tree(outdir + "/tree")
        for node in tree.leaves():
            tree.rename(node.name, node.name[:node.name.rfind("_")])
        tree.write(basename + conf.treeext)


sys.exit(result)
