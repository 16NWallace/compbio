#!/usr/bin/env python

import sys

from rasmus import util
from rasmus import treelib

from rasmus.bio import phylo
from rasmus.bio import genomeutil

options = [
 ["S:", "smap=", "smap", "<gene2speces map>",
    {"single": True}],
 ["s:", "stree=", "stree", "<species tree>",
    {"single": True}],
 ["P:", "partext=", "partext", "<partition file extension>",
    {"single": True,
     "default": ".split"}],
 ["T:", "treeext=", "treeext", "<tree filename extension>",
    {"single": True,
     "default": ".tree"}],
 ["Y:", "subtreeext=", "subtreeext", "<subtree filename extension>",
    {"single": True,
     "default": ".sub.tree"}],
]

conf = util.parseOptions(sys.argv, options, resthelp="<tree file> ...")

gene2species = genomeutil.readGene2species(conf["smap"])
stree = treelib.readTree(conf["stree"])


def normBoot(tree):
    if tree.hasData("boot") and len(tree.root.children) == 2:
        if tree.root.children[0].isLeaf() or \
           tree.root.children[1].isLeaf():
            tree.root.children[0].data["boot"] = 0.0
            tree.root.children[1].data["boot"] = 0.0
            tree.root.data["boot"] = 0.0
        else:
            boot = max(tree.root.children[0].data["boot"],
                       tree.root.children[1].data["boot"])
            tree.root.children[0].data["boot"] = boot
            tree.root.children[1].data["boot"] = boot
            tree.root.data["boot"] = 0.0


def splitTree(tree, stree, gene2species):
    """            
    - If root is a pre-speciation duplication:
	    - reconRoot tree
	    - If root is still a pre-speciation duplication
		    - remove root and split the tree into two separate trees
		    - recurse    
    """

    recon = phylo.reconcile(tree, stree, gene2species)
    events = phylo.labelEvents(tree, recon)

    if events[tree.root] == "dup" and \
       recon[tree.root] == stree.root:
        phylo.reconRoot(tree, stree, gene2species, newCopy=False)
        recon = phylo.reconcile(tree, stree, gene2species)
        events = phylo.labelEvents(tree, recon)
        
        #treelib.drawTree(tree, minlen=5)
        
        if events[tree.root] == "dup" and \
           recon[tree.root] == stree.root:
            subtrees = []
            
            for child in tree.root.children:
                subtrees.append(treelib.subtree(tree, child))
                
                # use the max bootstrap for the root branches
                normBoot(subtrees[-1])
            
            subtrees2 = []
            for subtree in subtrees:
                subtrees2.extend(splitTree(subtree, stree, gene2species)[1])
            
            # return subtrees
            return True, subtrees2
        
        # tree only needs rerooting
        normBoot(tree)
        return True, [tree]
        
    # nothing needs to change
    return False, [tree]
    

for filename in conf["REST"]:
    tree = treelib.readTree(filename)
    split, subtrees = splitTree(tree, stree, gene2species)
    
    if split:
        partfilename = util.replace_ext(filename, conf["treeext"], conf["partext"])
        partfile = open(partfilename, "w")
        
        print "splitting", filename
        print "  ",
        for i, subtree in enumerate(subtrees):
            print (i+1),
            subtreename = util.replace_ext(filename, conf["treeext"],
                                          "." + str(i+1) + conf["subtreeext"])
            subtree.write(subtreename)
            partfile.write("\t".join(subtree.leaf_names()) + "\n")
        print
        partfile.close()



    
    
